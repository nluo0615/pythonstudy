------列表------
增删查改
定义
mylist=[]
1.查找元素的下标索引
列表.index(元素)

2.修改特定下标元素的值
列表[下标]=值

3.插入元素
列表.insert(下标,元素)
下标是指定元素

4.在尾部追加单个元素
列表.append(元素)

5.在尾部追加一批
列表.extend(其他数据容器)

6.删除元素
del.列表[下标]
列表.pop(下标)
取出并返回该元素，可以用变量接受

7.删除第一个匹配项
列表.remove(元素)

8.清空列表
列表.clear()

9.统计某元素数量
列表.count(元素)

10.统计全部元素数量
len(列表)

------元组------
（一旦定义不可修改，只读）
mytuple=()
t=tuple()
t1=("hello",)
单独元素定义必须要带一个","不然会识别为str
1.查找元素的下标索引
元组.index(元素)

9.统计某元素数量
元组.count(元素)

10.统计全部元素数量
len(元组) 

------字符串------
（不可修改）（旧变新）
1.查找元素的下标索引
str.index(元素) 

9.统计某元素数量
字符串.count(元素)

10.统计全部元素数量
len(字符串) 

11.字符串1替换为字符串2
字符串.replace(字符串1,字符串2)
返回一个新的字符串

12.字符串分割
字符串.split(分隔符字符)
按照指定分隔符字符串，划分为多个字符，返回一个列表对象

13.字符串规整
字符串.strip()
去前后空格
字符串.strip(字符串)
去前后指定字符串两个小子串
有默认值

------序列------
（内容连续有序可使用下标索引，不包含集合）
14.序列[起始下标:结束下标:步长]
不影响序列本身，得到新的一个序列

------集合------
（不支持元素重复，自带去重，内容无序不支持下标索引不能用while循环便利）
myset={}
s=set()
因为字典所以不支持直接用大括号定义空字典
7.删除第一个匹配项
集合.remove(元素)

8.清空列表
列表.clear()

10.统计全部元素数量
len(列表)

15.添加新元素
集合.add()

16.随机取出一个元素
集合.pop()
取出并返回该元素，可以用变量接受

17.取出2个集合的差集
集合1.difference(集合2)
得到一个新集合

18.消除2个集合的差集
集合1.difference_update(集合2)
集合1被修改，集合2不变

19.2个集合合并
集合1.union(集合2)
得到一个新集合，顺序不能确定

------字典------
（不支持下标索引不能用while）
{key:value,key:value...}
mydict={key:value,key:value...}
dict1={}
dict2=dict()
不允许key重复，新替换旧
基于key可以查询value，类似下标索引
key不支持字典，value的数据类型是任意的

字典嵌套
mydict={
"小洛":{"语文":95,"数学":100,"英语":90}，
"小冰":{"语文":90,"数学":100,"英语":99}，
}
ChineseScore=mydict["小洛"]["语文"]
1新增/更新元素
字典[key]=.value
key存不存在，存在就是更新，不存在就是新增

6.删除元素
字典.pop(key)
取出并返回该元素，可以用变量接受

8.清空列表
字典.clear()

10.统计全部元素数量
len(元组) 

20.获取全部的key
字典.keys()

字典的遍历
keys=字典.keys()
for key in keys：
  print(key)

for key in mydict：
  print(key)

通用操作：
len，min，max
字典用key比较：字符串比较大小
容器通用转换:
list，str，tuple，set
字典转列表元组保留key舍去value
列表元组集合字典转字符串会有""
通用排序：
sorted(容器,[reverse=True])
结果变为列表，带参数反向排序